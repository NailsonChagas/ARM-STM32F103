
exemplo_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000330  08000330  00001330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000340  08000340  00001348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00001348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00001340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000344  08000344  00001344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000348  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000348  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000296  00000000  00000000  00001371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000154  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000530  00000000  00000000  00011721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000544d3  00000000  00000000  00011c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066124  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a0  00000000  00000000  00066168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00066208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000318 	.word	0x08000318

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000318 	.word	0x08000318

08000170 <main>:

void delay_ms(uint16_t t);
uint8_t check_button();

int main(void)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
	/* Para este exemplo estarei usando a porta A
     * bit 2 -> I/O port A clock enable (IOPA EN) |
    **/
	RCC->APB2ENR |= 1 << 2;
 8000176:	4b1c      	ldr	r3, [pc, #112]	@ (80001e8 <main+0x78>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a1b      	ldr	r2, [pc, #108]	@ (80001e8 <main+0x78>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6193      	str	r3, [r2, #24]
	 *31 30 29 28 | 27 26 25 24 | 23 22 21 20 | 19 18 17 16 | 15 14 13 12 | 11 10 09 08 | 07 06 05 04 | 03 02 01 00
	 * CNF   MODE    CNF   MODE    CNF   MODE    CNF   MODE    CNF   MODE    CNF   MODE    CNF   MODE    CNF   MODE
	 *
	 * 10000010001000100010001000100010 = 0x82222222
	 * */
	GPIOA->CRL = 0x82222222;
 8000182:	4b1a      	ldr	r3, [pc, #104]	@ (80001ec <main+0x7c>)
 8000184:	4a1a      	ldr	r2, [pc, #104]	@ (80001f0 <main+0x80>)
 8000186:	601a      	str	r2, [r3, #0]
	/*
	 *  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
	 * __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
	 * 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	 * */
	GPIOA->ODR = 1 << 7;
 8000188:	4b18      	ldr	r3, [pc, #96]	@ (80001ec <main+0x7c>)
 800018a:	2280      	movs	r2, #128	@ 0x80
 800018c:	60da      	str	r2, [r3, #12]


	const uint8_t hex_lookup[] = {
 800018e:	4b19      	ldr	r3, [pc, #100]	@ (80001f4 <main+0x84>)
 8000190:	1d3c      	adds	r4, r7, #4
 8000192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x66, 0x6D, 0x7D, 0x7, // 1100110, 1101101, 1111101, 0000111
			0x7F, 0x67, 0x5C, 0x7C,// 1111111, 1100111, 1011100, 1111100
			0x58, 0x5E, 0x79, 0x71 // 1011000, 1011110, 1111001, 1110001
	};

	uint8_t i = 0, changed = 0;
 8000198:	2300      	movs	r3, #0
 800019a:	75fb      	strb	r3, [r7, #23]
 800019c:	2300      	movs	r3, #0
 800019e:	75bb      	strb	r3, [r7, #22]
//		for(uint8_t i = 0; i < 16; i++){
//			GPIOA->ODR |= hex_lookup[i];
//			delay_ms(100);
//			GPIOA->ODR &= 0xFF80; // zerar os bits 6 a 0: 1111 | 1111 | 1000 0000
//		}
		GPIOA->ODR |= hex_lookup[i];
 80001a0:	4b12      	ldr	r3, [pc, #72]	@ (80001ec <main+0x7c>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	7dfa      	ldrb	r2, [r7, #23]
 80001a6:	3218      	adds	r2, #24
 80001a8:	443a      	add	r2, r7
 80001aa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80001ae:	4611      	mov	r1, r2
 80001b0:	4a0e      	ldr	r2, [pc, #56]	@ (80001ec <main+0x7c>)
 80001b2:	430b      	orrs	r3, r1
 80001b4:	60d3      	str	r3, [r2, #12]
		delay_ms(15);
 80001b6:	200f      	movs	r0, #15
 80001b8:	f000 f83e 	bl	8000238 <delay_ms>
		GPIOA->ODR &= 0xFF80; // zerar os bits 6 a 0: 1111111110000000
 80001bc:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <main+0x7c>)
 80001be:	68da      	ldr	r2, [r3, #12]
 80001c0:	490a      	ldr	r1, [pc, #40]	@ (80001ec <main+0x7c>)
 80001c2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80001c6:	4013      	ands	r3, r2
 80001c8:	60cb      	str	r3, [r1, #12]

		if(i < 16){
 80001ca:	7dfb      	ldrb	r3, [r7, #23]
 80001cc:	2b0f      	cmp	r3, #15
 80001ce:	d807      	bhi.n	80001e0 <main+0x70>
			i += check_button();
 80001d0:	f000 f812 	bl	80001f8 <check_button>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	7dfb      	ldrb	r3, [r7, #23]
 80001da:	4413      	add	r3, r2
 80001dc:	75fb      	strb	r3, [r7, #23]
 80001de:	e7df      	b.n	80001a0 <main+0x30>
		}
		else{
			i = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	75fb      	strb	r3, [r7, #23]
		GPIOA->ODR |= hex_lookup[i];
 80001e4:	e7dc      	b.n	80001a0 <main+0x30>
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40010800 	.word	0x40010800
 80001f0:	82222222 	.word	0x82222222
 80001f4:	08000330 	.word	0x08000330

080001f8 <check_button>:
		}
	}
}

uint8_t check_button(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	// checando se o botão no pino 7 esta pressionado
	if((GPIOA->IDR & (1 << 7)) == 0){ // == 0 pois esta usando pull up
 80001fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000234 <check_button+0x3c>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000204:	2b00      	cmp	r3, #0
 8000206:	d111      	bne.n	800022c <check_button+0x34>
		// delay simples para debouncing (ideal seria usar clock e interrupções)
		delay_ms(10);
 8000208:	200a      	movs	r0, #10
 800020a:	f000 f815 	bl	8000238 <delay_ms>

		// checa valor do bit 7 novamente para garantir que o botão esta pressioando
		if((GPIOA->IDR & (1 << 7)) == 0){
 800020e:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <check_button+0x3c>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000216:	2b00      	cmp	r3, #0
 8000218:	d101      	bne.n	800021e <check_button+0x26>
			return 1;
 800021a:	2301      	movs	r3, #1
 800021c:	e007      	b.n	800022e <check_button+0x36>
		}

		// espera o botão ser solto
		while ((GPIOA->IDR & (1 << 7)) == 0);
 800021e:	bf00      	nop
 8000220:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <check_button+0x3c>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <check_button+0x28>
	}
	return 0;
 800022c:	2300      	movs	r3, #0
}
 800022e:	4618      	mov	r0, r3
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40010800 	.word	0x40010800

08000238 <delay_ms>:

void delay_ms(uint16_t t){
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	80fb      	strh	r3, [r7, #6]
	volatile unsigned long l = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < t; i++){
 8000246:	2300      	movs	r3, #0
 8000248:	81fb      	strh	r3, [r7, #14]
 800024a:	e00d      	b.n	8000268 <delay_ms+0x30>
		for(l = 0; l < 6000; l++){}
 800024c:	2300      	movs	r3, #0
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	e002      	b.n	8000258 <delay_ms+0x20>
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	3301      	adds	r3, #1
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	f241 726f 	movw	r2, #5999	@ 0x176f
 800025e:	4293      	cmp	r3, r2
 8000260:	d9f7      	bls.n	8000252 <delay_ms+0x1a>
	for(uint16_t i = 0; i < t; i++){
 8000262:	89fb      	ldrh	r3, [r7, #14]
 8000264:	3301      	adds	r3, #1
 8000266:	81fb      	strh	r3, [r7, #14]
 8000268:	89fa      	ldrh	r2, [r7, #14]
 800026a:	88fb      	ldrh	r3, [r7, #6]
 800026c:	429a      	cmp	r2, r3
 800026e:	d3ed      	bcc.n	800024c <delay_ms+0x14>
	}
}
 8000270:	bf00      	nop
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	@ (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	@ (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	@ (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	@ (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	@ (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f811 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff5f 	bl	8000170 <main>

080002b2 <LoopForever>:

LoopForever:
  b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2600      	movs	r6, #0
 80002d4:	4d0c      	ldr	r5, [pc, #48]	@ (8000308 <__libc_init_array+0x38>)
 80002d6:	4c0d      	ldr	r4, [pc, #52]	@ (800030c <__libc_init_array+0x3c>)
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	42a6      	cmp	r6, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	f000 f81a 	bl	8000318 <_init>
 80002e4:	2600      	movs	r6, #0
 80002e6:	4d0a      	ldr	r5, [pc, #40]	@ (8000310 <__libc_init_array+0x40>)
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <__libc_init_array+0x44>)
 80002ea:	1b64      	subs	r4, r4, r5
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	42a6      	cmp	r6, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f8:	4798      	blx	r3
 80002fa:	3601      	adds	r6, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000302:	4798      	blx	r3
 8000304:	3601      	adds	r6, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000340 	.word	0x08000340
 800030c:	08000340 	.word	0x08000340
 8000310:	08000340 	.word	0x08000340
 8000314:	08000344 	.word	0x08000344

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
