
exemplo_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS
  4 .ARM          00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000028e  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000013e  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000017d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000058a  00000000  00000000  00011799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000544d0  00000000  00000000  00011d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000661f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ac  00000000  00000000  00066238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000662e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003c0 	.word	0x080003c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003c0 	.word	0x080003c0

08000170 <main>:

uint8_t check_button();
void delay_ms(uint16_t t);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
	uint8_t pedestrian = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	71bb      	strb	r3, [r7, #6]

	RCC->APB2ENR |= 1 << 2; // Habilitar clock na porta A (bit 2)
 800017e:	4b3f      	ldr	r3, [pc, #252]	@ (800027c <main+0x10c>)
 8000180:	699b      	ldr	r3, [r3, #24]
 8000182:	4a3e      	ldr	r2, [pc, #248]	@ (800027c <main+0x10c>)
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	6193      	str	r3, [r2, #24]
	 *  0  0  0  0  0  0  0 |  0  0  1  0 |  0  0  1  0 |  1  0  0  0 |  0  0  1  0 |  0  0  1  0 |  0  0  1  0
	 * __ __ __ __ __ __ __ | __ __ __ __ | __ __ __ __ | __ __ __ __ | __ __ __ __ | __ __ __ __ | __ __ __ __
	 * 31 30 29 28 27 26 25 | 24 23 22 21 | 20 19 18 17 | 16 15 14 13 | 12 11 09 08 | 07 06 05 04 | 03 02 01 00
	 * que é 228222 em hexadecimal
	 */
	GPIOA->CRL = 0x228222;
 800018a:	4b3d      	ldr	r3, [pc, #244]	@ (8000280 <main+0x110>)
 800018c:	4a3d      	ldr	r2, [pc, #244]	@ (8000284 <main+0x114>)
 800018e:	601a      	str	r2, [r3, #0]

	// resistor pull up na entrada PA3
	GPIOA->ODR = 1 << 3;
 8000190:	4b3b      	ldr	r3, [pc, #236]	@ (8000280 <main+0x110>)
 8000192:	2208      	movs	r2, #8
 8000194:	60da      	str	r2, [r3, #12]

	while(1){
		switch(flag){
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	3b01      	subs	r3, #1
 800019a:	2b03      	cmp	r3, #3
 800019c:	d866      	bhi.n	800026c <main+0xfc>
 800019e:	a201      	add	r2, pc, #4	@ (adr r2, 80001a4 <main+0x34>)
 80001a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a4:	080001b5 	.word	0x080001b5
 80001a8:	08000203 	.word	0x08000203
 80001ac:	08000225 	.word	0x08000225
 80001b0:	08000249 	.word	0x08000249
			case 1: // vermelho
				GPIOA->ODR &= ~(1 << 1); // desliga o amarelo veiculo
 80001b4:	4b32      	ldr	r3, [pc, #200]	@ (8000280 <main+0x110>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a31      	ldr	r2, [pc, #196]	@ (8000280 <main+0x110>)
 80001ba:	f023 0302 	bic.w	r3, r3, #2
 80001be:	60d3      	str	r3, [r2, #12]
				GPIOA->ODR |= 1 << 0; // liga o vermelho veiculo
 80001c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000280 <main+0x110>)
 80001c2:	68db      	ldr	r3, [r3, #12]
 80001c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000280 <main+0x110>)
 80001c6:	f043 0301 	orr.w	r3, r3, #1
 80001ca:	60d3      	str	r3, [r2, #12]

				if (pedestrian == 1){
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d112      	bne.n	80001f8 <main+0x88>
					GPIOA->ODR &= ~(1 << 4); // desliga o vermelho pedestre
 80001d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000280 <main+0x110>)
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000280 <main+0x110>)
 80001d8:	f023 0310 	bic.w	r3, r3, #16
 80001dc:	60d3      	str	r3, [r2, #12]
					GPIOA->ODR |= 1 << 5; // liga o verde pedestre
 80001de:	4b28      	ldr	r3, [pc, #160]	@ (8000280 <main+0x110>)
 80001e0:	68db      	ldr	r3, [r3, #12]
 80001e2:	4a27      	ldr	r2, [pc, #156]	@ (8000280 <main+0x110>)
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	60d3      	str	r3, [r2, #12]
					delay_ms(750);
 80001ea:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80001ee:	f000 f84b 	bl	8000288 <delay_ms>
					flag = 3; // para entrar no case 4 na proxima iteração
 80001f2:	2303      	movs	r3, #3
 80001f4:	71fb      	strb	r3, [r7, #7]
				}
				else{
					delay_ms(500);
				}
				break;
 80001f6:	e039      	b.n	800026c <main+0xfc>
					delay_ms(500);
 80001f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001fc:	f000 f844 	bl	8000288 <delay_ms>
				break;
 8000200:	e034      	b.n	800026c <main+0xfc>
			case 2: // verde
				GPIOA->ODR &= ~(1 << 0); // desliga o vermelho veiculo
 8000202:	4b1f      	ldr	r3, [pc, #124]	@ (8000280 <main+0x110>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	4a1e      	ldr	r2, [pc, #120]	@ (8000280 <main+0x110>)
 8000208:	f023 0301 	bic.w	r3, r3, #1
 800020c:	60d3      	str	r3, [r2, #12]
				GPIOA->ODR |= 1 << 2;  // liga o verde veiculo
 800020e:	4b1c      	ldr	r3, [pc, #112]	@ (8000280 <main+0x110>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4a1b      	ldr	r2, [pc, #108]	@ (8000280 <main+0x110>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	60d3      	str	r3, [r2, #12]
				delay_ms(500);
 800021a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800021e:	f000 f833 	bl	8000288 <delay_ms>
				break;
 8000222:	e023      	b.n	800026c <main+0xfc>
			case 3: // amarelo
				GPIOA->ODR &= ~(1 << 2); // desliga o verde veiculo
 8000224:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <main+0x110>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a15      	ldr	r2, [pc, #84]	@ (8000280 <main+0x110>)
 800022a:	f023 0304 	bic.w	r3, r3, #4
 800022e:	60d3      	str	r3, [r2, #12]
				GPIOA->ODR |= 1 << 1; // liga o amarelo veiculo
 8000230:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <main+0x110>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <main+0x110>)
 8000236:	f043 0302 	orr.w	r3, r3, #2
 800023a:	60d3      	str	r3, [r2, #12]
				delay_ms(250);
 800023c:	20fa      	movs	r0, #250	@ 0xfa
 800023e:	f000 f823 	bl	8000288 <delay_ms>
				flag = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]
				break;
 8000246:	e011      	b.n	800026c <main+0xfc>
			case 4:
				GPIOA->ODR &= ~(1 << 5); // desliga o verde pedestre
 8000248:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <main+0x110>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4a0c      	ldr	r2, [pc, #48]	@ (8000280 <main+0x110>)
 800024e:	f023 0320 	bic.w	r3, r3, #32
 8000252:	60d3      	str	r3, [r2, #12]
				GPIOA->ODR |= (1 << 4) | (1 << 1); // liga o vermelho pedestre / liga o amarelo veiculo
 8000254:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <main+0x110>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a09      	ldr	r2, [pc, #36]	@ (8000280 <main+0x110>)
 800025a:	f043 0312 	orr.w	r3, r3, #18
 800025e:	60d3      	str	r3, [r2, #12]
				delay_ms(250);
 8000260:	20fa      	movs	r0, #250	@ 0xfa
 8000262:	f000 f811 	bl	8000288 <delay_ms>
				flag = 1; // para ir para o case 2 na proxima iteração
 8000266:	2301      	movs	r3, #1
 8000268:	71fb      	strb	r3, [r7, #7]
				break;
 800026a:	bf00      	nop
		}
		pedestrian = check_button();
 800026c:	f000 f82e 	bl	80002cc <check_button>
 8000270:	4603      	mov	r3, r0
 8000272:	71bb      	strb	r3, [r7, #6]
		flag += 1;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	3301      	adds	r3, #1
 8000278:	71fb      	strb	r3, [r7, #7]
		switch(flag){
 800027a:	e78c      	b.n	8000196 <main+0x26>
 800027c:	40021000 	.word	0x40021000
 8000280:	40010800 	.word	0x40010800
 8000284:	00228222 	.word	0x00228222

08000288 <delay_ms>:
}

/* Retirado do livro
 * Sendo usado por que não sei usar o clock ainda
 * The following delay is tested with Keil and 72MHz */
void delay_ms(uint16_t t){
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	80fb      	strh	r3, [r7, #6]
	volatile unsigned long l = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < t; i++){
 8000296:	2300      	movs	r3, #0
 8000298:	81fb      	strh	r3, [r7, #14]
 800029a:	e00d      	b.n	80002b8 <delay_ms+0x30>
		for(l = 0; l < 6000; l++){}
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	e002      	b.n	80002a8 <delay_ms+0x20>
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	3301      	adds	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	f241 726f 	movw	r2, #5999	@ 0x176f
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d9f7      	bls.n	80002a2 <delay_ms+0x1a>
	for(uint16_t i = 0; i < t; i++){
 80002b2:	89fb      	ldrh	r3, [r7, #14]
 80002b4:	3301      	adds	r3, #1
 80002b6:	81fb      	strh	r3, [r7, #14]
 80002b8:	89fa      	ldrh	r2, [r7, #14]
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d3ed      	bcc.n	800029c <delay_ms+0x14>
	}
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <check_button>:

uint8_t check_button(){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
	// checando se o botão no pino 3 esta pressionado
	if((GPIOA->IDR & (1 << 3)) == 0){
 80002d2:	4b13      	ldr	r3, [pc, #76]	@ (8000320 <check_button+0x54>)
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	f003 0308 	and.w	r3, r3, #8
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d119      	bne.n	8000312 <check_button+0x46>
		// delay simples para debouncing (ideal seria usar clock e interrupções)
		for (volatile uint32_t i = 0; i < 10000; i++);
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	e002      	b.n	80002ea <check_button+0x1e>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d9f7      	bls.n	80002e4 <check_button+0x18>

		// checa valor do bit 3 novamente para garantir que o botão esta pressioando
		if((GPIOA->IDR & (1 << 3)) == 0){
 80002f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <check_button+0x54>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d101      	bne.n	8000304 <check_button+0x38>
			return 1;
 8000300:	2301      	movs	r3, #1
 8000302:	e007      	b.n	8000314 <check_button+0x48>
		}

		// espera o botão ser solto
		while ((GPIOA->IDR & (1 << 3)) == 0);
 8000304:	bf00      	nop
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <check_button+0x54>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 0308 	and.w	r3, r3, #8
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <check_button+0x3a>
	}
	return 0;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40010800 	.word	0x40010800

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	@ (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff0b 	bl	8000170 <main>

0800035a <LoopForever>:

LoopForever:
  b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	2000001c 	.word	0x2000001c

08000374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC1_2_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	2600      	movs	r6, #0
 800037c:	4d0c      	ldr	r5, [pc, #48]	@ (80003b0 <__libc_init_array+0x38>)
 800037e:	4c0d      	ldr	r4, [pc, #52]	@ (80003b4 <__libc_init_array+0x3c>)
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	f000 f81a 	bl	80003c0 <_init>
 800038c:	2600      	movs	r6, #0
 800038e:	4d0a      	ldr	r5, [pc, #40]	@ (80003b8 <__libc_init_array+0x40>)
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <__libc_init_array+0x44>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
